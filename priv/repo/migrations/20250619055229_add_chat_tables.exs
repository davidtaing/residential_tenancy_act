defmodule ResidentialTenancyAct.Repo.Migrations.AddChatTables do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:token_history, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true

      add :user_id,
          references(:users,
            column: :id,
            name: "token_history_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :conversation_id, :uuid, null: false
      add :input_tokens, :bigint, null: false
      add :output_tokens, :bigint, null: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:messages, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true

      add :user_id,
          references(:users,
            column: :id,
            name: "messages_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :role, :text, null: false
      add :content, :text, null: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :conversation_id, :uuid
    end

    create table(:conversations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:token_history) do
      modify :conversation_id,
             references(:conversations,
               column: :id,
               name: "token_history_conversation_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:messages) do
      modify :conversation_id,
             references(:conversations,
               column: :id,
               name: "messages_conversation_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:conversations) do
      add :user_id,
          references(:users,
            column: :id,
            name: "conversations_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end
  end

  def down do
    drop constraint(:conversations, "conversations_user_id_fkey")

    alter table(:conversations) do
      remove :updated_at
      remove :created_at
      remove :user_id
    end

    drop constraint(:messages, "messages_conversation_id_fkey")

    alter table(:messages) do
      modify :conversation_id, :uuid
    end

    drop constraint(:token_history, "token_history_conversation_id_fkey")

    alter table(:token_history) do
      modify :conversation_id, :uuid
    end

    drop table(:conversations)

    drop constraint(:messages, "messages_user_id_fkey")

    drop table(:messages)

    drop constraint(:token_history, "token_history_user_id_fkey")

    drop table(:token_history)
  end
end
